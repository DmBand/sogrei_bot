import json
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

from secret import TOKEN
from ppt_price_for_one_calculator import get_price_for_one

CATEGORIES = [
    '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω',
    '–î—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏',
    '–ü–µ–Ω–æ–ø–ª–∞—Å—Ç',
    '–ü—Ä–æ—Ñ–∏–ª—å',
    '–°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è',
    '–°—Ç–∞–ª—å',
    '–°—É—Ö–∏–µ —Å–º–µ—Å–∏',
    'OSB-–ø–ª–∏—Ç—ã –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ',
]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [cat for cat in CATEGORIES]
    keyboard.add(*buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.\n'
                              '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òé +375336224802',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals='‚ú≥ –ú–µ–Ω—é'))
async def get_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [cat for cat in CATEGORIES]
    keyboard.add(*buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.\n'
                              '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òé +375336224802',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals='–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', 'üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú® –û–±—ã—á–Ω—ã–π', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRYWALL')
    for dry in data['–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π']:
        answer += f'üî∏ {dry}: {"%.2f" % data["–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú® –û–±—ã—á–Ω—ã–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRYWALL')
    for dry in data['–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π']:
        answer += f'üî∏ {dry}: {"%.2f" % data["–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', '‚ú® –û–±—ã—á–Ω—ã–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='‚ú® –û–±—ã—á–Ω—ã–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRYWALL')
    for dry in data['–û–±—ã—á–Ω—ã–π']:
        answer += f'üî∏ {dry}: {"%.2f" % data["–û–±—ã—á–Ω—ã–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', 'üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–î—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', 'üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1—à—Ç: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DOWEl')
    for dow in data['–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å']:
        answer += f'üî∏ {dow}: {"%.2f" % data["–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å"][dow]} —Ä—É–±.\n'
    keyboard.add('üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1—à—Ç: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DOWEl')
    for dow in data['–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å']:
        answer += f'üî∏ {dow}: {"%.2f" % data["–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å"][dow]} —Ä—É–±.\n'
    keyboard.add('‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–ü–µ–Ω–æ–ø–ª–∞—Å—Ç'))
async def get_ppt_price(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üëá –ö–∞–∫—É—é —Ü–µ–Ω—É —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?'
    keyboard.add('üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3', 'üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3'))
async def get_ppt_price(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º3: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('PPT_PRICE_PER_CUBIC_METER')
        for ppt in data:
            answer += f'üî∏ {ppt}: {"%.2f" % data[ppt]} —Ä—É–±.\n'
    keyboard.add('üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç'))
async def get_ppt_price(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: 1000*500–º–º:\n'
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 10-A\n\n'
    data = get_price_for_one()
    for p in data['–ü–ü–¢-10-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-10-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-A\n\n'
    for p in data['–ü–ü–¢-15-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-15-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-–ë\n\n'
    for p in data['–ü–ü–¢-15-–ë']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-15-–ë']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 20-–ê\n\n'
    for p in data['–ü–ü–¢-20-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-20-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ê\n\n'
    for p in data['–ü–ü–¢-25-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-25-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ë\n\n'
    for p in data['–ü–ü–¢-25-–ë']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-25-–ë']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 35-A\n\n'
    for p in data['–ü–ü–¢-35-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-35-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"

    answer += '\nüìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: 1000x1000–º–º:\n'
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 10-A\n\n'
    for p in data['–ü–ü–¢-10-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-10-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-A\n\n'
    for p in data['–ü–ü–¢-15-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-15-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-–ë\n\n'
    for p in data['–ü–ü–¢-20-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-20-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ê\n\n'
    for p in data['–ü–ü–¢-25-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-25-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 35-A\n\n'
    for p in data['–ü–ü–¢-35-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-35-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"

    keyboard.add('üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–ü—Ä–æ—Ñ–∏–ª—å'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ 1—à—Ç (3–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('PROFILE')
    for pr in data:
        answer += f'üî∏ {pr}: {"%.2f" % data[pr]} —Ä—É–±.\n'
    keyboard.add('‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º2: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('FIBERGLASS_MESH')
    for mesh in data:
        answer += f'üî∏ {mesh}: {"%.2f" % data[mesh]} —Ä—É–±.\n'
    keyboard.add('‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–°—Ç–∞–ª—å'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', 'üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', 'üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ø—Ä—É—Ç: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('STEEL')
    for st in data['–ê—Ä–º–∞—Ç—É—Ä–∞']:
        answer += f'üî∏ {st}: {"%.2f" % data["–ê—Ä–º–∞—Ç—É—Ä–∞"][st]} —Ä—É–±.\n'
    keyboard.add('üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', 'üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 —Ç—Ä—É–±—É (6–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('STEEL')
    for st in data['–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ']:
        answer += f'üî∏ {st}: {"%.2f" % data["–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ"][st]} —Ä—É–±.\n'
    keyboard.add('üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', 'üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 —Ç—Ä—É–±—É (6–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('STEEL')
    for st in data['–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π']:
        answer += f'üî∏ {st}: {"%.2f" % data["–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π"][st]} —Ä—É–±.\n'
    keyboard.add('üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', 'üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–°—É—Ö–∏–µ —Å–º–µ—Å–∏'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è', '–ö–ª–µ–π', '–ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–ö–æ—Ä–æ–µ–¥',
            '–ö–æ—Ä–Ω–∏–∫', '–¶–µ–º–µ–Ω—Ç', '–®–ø–∞—Ç–ª–µ–≤–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='OSB-–ø–ª–∏—Ç—ã –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1—à—Ç (6–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('OSB_PLATE')
    for osb in data:
        answer += f'üî∏ {osb}: {"%.2f" % data[osb]} —Ä—É–±.\n'
    keyboard.add('‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
