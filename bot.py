import json
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

from secret import TOKEN
from ppt_price_for_one_calculator import get_price_for_one

CATEGORIES = [
    '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω',
    '–î—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏',
    '–ü–µ–Ω–æ–ø–ª–∞—Å—Ç',
    '–ü—Ä–æ—Ñ–∏–ª—å',
    '–°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è',
    '–°—Ç–∞–ª—å',
    '–°—É—Ö–∏–µ —Å–º–µ—Å–∏',
    'OSB-–ø–ª–∏—Ç—ã –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ',
]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [cat for cat in CATEGORIES]
    keyboard.add(*buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.\n'
                              '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òé +375336224802',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals=['‚ú≥ –ú–µ–Ω—é', '–ú–µ–Ω—é', '–º–µ–Ω—é']))
async def get_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [cat for cat in CATEGORIES]
    keyboard.add(*buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.\n'
                              '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òé +375336224802',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals=['–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω']))
async def get_drywall(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', 'üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú® –û–±—ã—á–Ω—ã–π', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', '–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', '–æ–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π']))
async def get_refactory_drywall(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRYWALL')
    for dry in data['–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π']:
        answer += f'üî∏ {dry}: {"%.2f" % data["–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú® –û–±—ã—á–Ω—ã–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '–≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π']))
async def get_moisture_resistant_drywal(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRYWALL')
    for dry in data['–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π']:
        answer += f'üî∏ {dry}: {"%.2f" % data["–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', '‚ú® –û–±—ã—á–Ω—ã–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['‚ú® –û–±—ã—á–Ω—ã–π', '–û–±—ã—á–Ω—ã–π', '–æ–±—ã—á–Ω—ã–π']))
async def get_simple_drywall(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRYWALL')
    for dry in data['–û–±—ã—á–Ω—ã–π']:
        answer += f'üî∏ {dry}: {"%.2f" % data["–û–±—ã—á–Ω—ã–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', 'üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–î—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏', '–¥—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏']))
async def get_dowel(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', 'üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', '–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', '—Å—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å']))
async def get_steel_dowel(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1—à—Ç: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DOWEl')
    for dow in data['–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å']:
        answer += f'üî∏ {dow}: {"%.2f" % data["–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å"][dow]} —Ä—É–±.\n'
    keyboard.add('üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '–ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å']))
async def get_plastic_dowel(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1—à—Ç: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DOWEl')
    for dow in data['–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å']:
        answer += f'üî∏ {dow}: {"%.2f" % data["–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å"][dow]} —Ä—É–±.\n'
    keyboard.add('‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–ü–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç']))
async def get_ppt_price(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üëá –ö–∞–∫—É—é —Ü–µ–Ω—É —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?'
    keyboard.add('üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3', 'üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3', '–¶–µ–Ω–∞ –∑–∞ 1–º3', '—Ü–µ–Ω–∞ –∑–∞ 1–º3']))
async def get_ppt_price_per_cubic_meter(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º3: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('PPT_PRICE_PER_CUBIC_METER')
        for ppt in data:
            answer += f'üî∏ {ppt}: {"%.2f" % data[ppt]} —Ä—É–±.\n'
    keyboard.add('üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '–¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '—Ü–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç']))
async def get_ppt_price_for_one(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: 1000*500–º–º:\n'
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 10-A\n\n'
    data = get_price_for_one()
    for p in data['–ü–ü–¢-10-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-10-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-A\n\n'
    for p in data['–ü–ü–¢-15-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-15-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-–ë\n\n'
    for p in data['–ü–ü–¢-15-–ë']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-15-–ë']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 20-–ê\n\n'
    for p in data['–ü–ü–¢-20-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-20-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ê\n\n'
    for p in data['–ü–ü–¢-25-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-25-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ë\n\n'
    for p in data['–ü–ü–¢-25-–ë']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-25-–ë']['1000*500–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 35-A\n\n'
    for p in data['–ü–ü–¢-35-–ê']['1000*500–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-35-–ê']['1000*500–º–º'][p]} —Ä—É–±.\n"

    answer += '\nüìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: 1000x1000–º–º:\n'
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 10-A\n\n'
    for p in data['–ü–ü–¢-10-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-10-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-A\n\n'
    for p in data['–ü–ü–¢-15-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-15-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-–ë\n\n'
    for p in data['–ü–ü–¢-20-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-20-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ê\n\n'
    for p in data['–ü–ü–¢-25-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-25-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"
    answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 35-A\n\n'
    for p in data['–ü–ü–¢-35-–ê']['1000*1000–º–º']:
        answer += f"{p}: {'%.2f' % data['–ü–ü–¢-35-–ê']['1000*1000–º–º'][p]} —Ä—É–±.\n"

    keyboard.add('üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–ü—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å']))
async def get_profile(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ 1—à—Ç (3–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('PROFILE')
    for pr in data:
        answer += f'üî∏ {pr}: {"%.2f" % data[pr]} —Ä—É–±.\n'
    keyboard.add('‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è', '—Å–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è']))
async def get_fiberglass_mesh(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º2: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('FIBERGLASS_MESH')
    for mesh in data:
        answer += f'üî∏ {mesh}: {"%.2f" % data[mesh]} —Ä—É–±.\n'
    keyboard.add('‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–°—Ç–∞–ª—å', '—Å—Ç–∞–ª—å']))
async def get_steel(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', 'üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', 'üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', '–ê—Ä–º–∞—Ç—É—Ä–∞', '–∞—Ä–º–∞—Ç—É—Ä–∞']))
async def get_fittings(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ø—Ä—É—Ç: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('STEEL')
    for st in data['–ê—Ä–º–∞—Ç—É—Ä–∞']:
        answer += f'üî∏ {st}: {"%.2f" % data["–ê—Ä–º–∞—Ç—É—Ä–∞"][st]} —Ä—É–±.\n'
    keyboard.add('üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', 'üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', '–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', '—Ç—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ']))
async def get_pipe(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 —Ç—Ä—É–±—É (6–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('STEEL')
    for st in data['–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ']:
        answer += f'üî∏ {st}: {"%.2f" % data["–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ"][st]} —Ä—É–±.\n'
    keyboard.add('üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', 'üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '—É–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π']))
async def get_corner(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 —Ç—Ä—É–±—É (6–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('STEEL')
    for st in data['–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π']:
        answer += f'üî∏ {st}: {"%.2f" % data["–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π"][st]} —Ä—É–±.\n'
    keyboard.add('üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', 'üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '—Å—É—Ö–∏–µ —Å–º–µ—Å–∏']))
async def get_dry_mixes(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['üíß –ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è', 'üü• –ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', 'üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã',
            'üß± –ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã', 'üü® –ö–æ—Ä–æ–µ–¥', 'üü© –ö–æ—Ä–Ω–∏–∫', 'üü´ –°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã',
            'üî¥ –°—Ç—è–∂–∫–∏', '‚ö™ –¶–µ–º–µ–Ω—Ç', 'üü° –®–ø–∞—Ç–ª–µ–≤–∫–∞', 'üü¢ –®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', 'üü£ –®—É–±–∞', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üíß –ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è', '–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è', '–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è']))
async def get_waterproofing(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è']:
        answer += f'üî∏ {i}: {"%.2f" % data["–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üü• –ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', '–ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', '–≥–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π']))
async def get_gypsum(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π']:
        answer += f'üî∏ {i}: {"%.2f" % data["–ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–∫–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã']))
async def get_glues(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    btn = [k for k in data['–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã'].keys()]
    btns = [*btn, '–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–ì–∏–ø—Å–æ–≤—ã–µ', '–≥–∏–ø—Å–æ–≤—ã–µ']))
async def get_gypsum_glue(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES').get('–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã')
    for i in data['–ì–∏–ø—Å–æ–≤—ã–µ']:
        answer += f'üî∏ {i}: {"%.2f" % data["–ì–∏–ø—Å–æ–≤—ã–µ"][i]} —Ä—É–±.\n'
    keyboard.add('üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals={'–î–ª—è –±–ª–æ–∫–æ–≤', '–¥–ª—è –±–ª–æ–∫–æ–≤'}))
async def get_glue_for_blocks(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES').get('–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã')
    for i in data['–î–ª—è –±–ª–æ–∫–æ–≤']:
        answer += f'üî∏ {i}: {"%.2f" % data["–î–ª—è –±–ª–æ–∫–æ–≤"][i]} —Ä—É–±.\n'
    keyboard.add('üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–î–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏', '–¥–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏']))
async def get_glue_for_thermal_insulation_systems(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES').get('–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã')
    for i in data['–î–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏']:
        answer += f'üî∏ {i}: {"%.2f" % data["–î–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏"][i]} —Ä—É–±.\n'
    keyboard.add('üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['–û–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ', '–æ–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ']))
async def get_facing(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES').get('–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã')
    for i in data['–û–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ']:
        answer += f'üî∏ {i}: {"%.2f" % data["–û–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ"][i]} —Ä—É–±.\n'
    keyboard.add('üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üß± –ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–∫–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã']))
async def get_masonry_composition(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã']:
        answer += f'üî∏ {i}: {"%.2f" % data["–ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üü® –ö–æ—Ä–æ–µ–¥', '–ö–æ—Ä–æ–µ–¥', '–∫–æ—Ä–æ–µ–¥']))
async def get_koroed(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–ö–æ—Ä–æ–µ–¥']:
        answer += f'üî∏ {i}: {"%.2f" % data["–ö–æ—Ä–æ–µ–¥"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üü© –ö–æ—Ä–Ω–∏–∫', '–ö–æ—Ä–Ω–∏–∫', '–∫–æ—Ä–Ω–∏–∫']))
async def get_kornik(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–ö–æ—Ä–Ω–∏–∫']:
        answer += f'üî∏ {i}: {"%.2f" % data["–ö–æ—Ä–Ω–∏–∫"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üü´ –°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã', '–°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã', '—Å–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã']))
async def get_self_leveling(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã']:
        answer += f'üî∏ {i}: {"%.2f" % data["–°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üî¥ –°—Ç—è–∂–∫–∏', '–°—Ç—è–∂–∫–∏', '—Å—Ç—è–∂–∫–∏']))
async def get_creed_mix(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–°—Ç—è–∂–∫–∏']:
        answer += f'üî∏ {i}: {"%.2f" % data["–°—Ç—è–∂–∫–∏"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['‚ö™ –¶–µ–º–µ–Ω—Ç', '–¶–µ–º–µ–Ω—Ç', '—Ü–µ–º–µ–Ω—Ç']))
async def get_cement(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–ö–æ—Ä–Ω–∏–∫']:
        answer += f'üî∏ {i}: {"%.2f" % data["–ö–æ—Ä–Ω–∏–∫"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üü° –®–ø–∞—Ç–ª–µ–≤–∫–∞', '–®–ø–∞—Ç–ª–µ–≤–∫–∞', '—à–ø–∞—Ç–ª–µ–≤–∫–∞']))
async def get_putty(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–®–ø–∞—Ç–ª–µ–≤–∫–∞']:
        answer += f'üî∏ {i}: {"%.2f" % data["–®–ø–∞—Ç–ª–µ–≤–∫–∞"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üü¢ –®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞']))
async def get_plaster(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞']:
        answer += f'üî∏ {i}: {"%.2f" % data["–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals=['üü£ –®—É–±–∞', '–®—É–±–∞', '—à—É–±–∞']))
async def get_shuba(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('DRY_MIXES')
    for i in data['–®—É–±–∞']:
        answer += f'üî∏ {i}: {"%.2f" % data["–®—É–±–∞"][i]} —Ä—É–±.\n'
    keyboard.add('–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='OSB-–ø–ª–∏—Ç—ã –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ'))
async def get_osb(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1—à—Ç (6–º): üíµ\n\n'
    with open('products.json', 'r', encoding='utf8') as f:
        data = json.load(f).get('OSB_PLATE')
    for osb in data:
        answer += f'üî∏ {osb}: {"%.2f" % data[osb]} —Ä—É–±.\n'
    keyboard.add('‚ú≥ –ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
