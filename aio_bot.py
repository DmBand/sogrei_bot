import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

from secret import TOKEN
from products import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [cat for cat in categories]
    keyboard.add(*buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.\n'
                              '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òé +375336224802',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals='–ú–µ–Ω—é'))
async def get_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [cat for cat in categories]
    keyboard.add(*buttons)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.\n'
                              '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òé +375336224802',
                         reply_markup=keyboard)


@dp.message_handler(Text(equals='–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = ['üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', 'üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú® –û–±—ã—á–Ω—ã–π', '–ú–µ–Ω—é']
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    for dry in DRYWALL['–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π']:
        answer += f'üî∏ {dry}: {"%.2f" % DRYWALL["–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '‚ú® –û–±—ã—á–Ω—ã–π', '–ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    for dry in DRYWALL['–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π']:
        answer += f'üî∏ {dry}: {"%.2f" % DRYWALL["–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', '‚ú® –û–±—ã—á–Ω—ã–π', '–ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='‚ú® –û–±—ã—á–Ω—ã–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
    for dry in DRYWALL['–û–±—ã—á–Ω—ã–π']:
        answer += f'üî∏ {dry}: {"%.2f" % DRYWALL["–û–±—ã—á–Ω—ã–π"][dry]} —Ä—É–±.\n'
    keyboard.add('üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', 'üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '–ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–ö–ª–µ–π'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –º–µ—à–æ–∫: üíµ\n\n'
    for glu in GLUES:
        answer += f'üî∏ {glu}: {"%.2f" % GLUES[glu]} —Ä—É–±.\n'
    keyboard.add('–ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–ü–µ–Ω–æ–ø–ª–∞—Å—Ç'))
async def get_ppt_price(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º3: üíµ\n\n'
    for ppt in PPT_PRICES:
        answer += f'üî∏ {ppt}: {"%.2f" % PPT_PRICES[ppt]} —Ä—É–±.\n'
    keyboard.add('–ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='–°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º2: üíµ\n\n'
    for mesh in FIBERGLASS_MESH:
        answer += f'üî∏ {mesh}: {"%.2f" % FIBERGLASS_MESH[mesh]} —Ä—É–±.\n'
    keyboard.add('–ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


@dp.message_handler(Text(equals='OSB-–ø–ª–∏—Ç—ã –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ'))
async def get_extrusion(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç: üíµ\n\n'
    for osb in OSB_PLATE:
        answer += f'üî∏ {osb}: {"%.2f" % OSB_PLATE[osb]} —Ä—É–±.\n'
    keyboard.add('–ú–µ–Ω—é')
    await message.answer(text=answer, reply_markup=keyboard)


# @dp.message_handler(Text(equals='–≠–∫—Å—Ç—Ä—É–∑–∏—è'))
# async def get_extrusion(message: types.Message):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç (1180*580–º–º): üíµ\n\n'
#     for ext in EXTRUSION_PRICES:
#         answer += f'üî∏ {ext}: {"%.2f" % EXTRUSION_PRICES[ext]} —Ä—É–±.\n'
#     keyboard.add('–ú–µ–Ω—é')
#     await message.answer(text=answer, reply_markup=keyboard)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
