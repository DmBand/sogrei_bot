import sqlite3

from ppt_price_for_one_calculator import get_price_for_one


class DBHandler:
    def __init__(self, db_name='sogreym_db'):
        self.db_name = db_name
        # self.conn = sqlite3.connect(self.db_name)

    def edit_price(self, product: str = None):
        pass

    def edit_stock(self):
        pass

    def get_drywall(self, description: str = None) -> str or None:
        """ –ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω """

        types = [
            '–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π',
            '–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π',
            '–û–±—ã—á–Ω—ã–π'
        ]
        if not description or description not in types:
            return

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            f"WHERE description = '{description}' AND in_stock = 1"
        )
        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç 1200*2500–º–º (3–º2): üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer

    def get_dowel(self, description: str = None) -> str or None:
        """ –î—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏ """

        types = [
            '–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å',
            '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å',
        ]
        if not description or description not in types:
            return

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            f"WHERE description = '{description}' AND in_stock = 1"
        )
        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1—à—Ç: üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer

    def get_paints(self, description: str = None, description2: str = None) -> str or None:
        """ –ö—Ä–∞—Å–∫–∏ """

        types = [
            '–¢–∞–π—Ñ—É–Ω –ú–∞—Å—Ç–µ—Ä',
            'Condor',
            'Kapral',
            'Sniezka',
            'Malevanka'
        ]
        if not description or description not in types:
            return

        conn = sqlite3.connect(self.db_name)
        if description2:
            row = conn.execute(
                "SELECT name, price "
                "FROM goods "
                f"WHERE description = '{description}' "
                f"AND description_2 = '{description2}'"
                f"AND in_stock = 1"
            )
        else:
            row = conn.execute(
                "SELECT name, price "
                "FROM goods "
                f"WHERE description = '{description}' AND in_stock = 1"
            )

        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –≤–µ–¥—Ä–æ: üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer

    def get_mineral_wool(self) -> str:
        """ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞ """

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            "WHERE category = 6 AND in_stock = 1"
        )
        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 —É–ø–∞–∫–æ–≤–∫—É: üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer

    def get_ppt_cubic_meter(self) -> str:
        """ –ü–µ–Ω–æ–ø–ª–∞—Å—Ç –∑–∞ 1 –º3 """

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            "WHERE category = 8 AND in_stock = 1 "
            "ORDER BY price ASC"
        )
        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º3: üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer

    def get_ppt_one_sheet(self) -> str:
        """ –ü–µ–Ω–æ–ø–ª–∞—Å—Ç –∑–∞ 1 –ª–∏—Å—Ç """

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            "WHERE category = 8 AND in_stock = 1 "
        )
        prices_per_cubic_meter = {i[0]: i[1] for i in row.fetchall()}
        answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç: üíµ\n\n' \
                 'üìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: 1000*500–º–º:\n'
        data = get_price_for_one(prices_per_cubic_meter)

        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 10-A\n\n'
        for p in data['–ü–ü–¢-10-–ê']['1000*500–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-10-–ê']['1000*500–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-A\n\n'
        for p in data['–ü–ü–¢-15-–ê']['1000*500–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-15-–ê']['1000*500–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-–ë\n\n'
        for p in data['–ü–ü–¢-15-–ë']['1000*500–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-15-–ë']['1000*500–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 20-–ê\n\n'
        for p in data['–ü–ü–¢-20-–ê']['1000*500–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-20-–ê']['1000*500–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ê\n\n'
        for p in data['–ü–ü–¢-25-–ê']['1000*500–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-25-–ê']['1000*500–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ë\n\n'
        for p in data['–ü–ü–¢-25-–ë']['1000*500–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-25-–ë']['1000*500–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 35-A\n\n'
        for p in data['–ü–ü–¢-35-–ê']['1000*500–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-35-–ê']['1000*500–º–º'][p]} —Ä—É–±.</b>\n"
        answer += '\nüìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: 1000x1000–º–º:\n'
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 10-A\n\n'
        for p in data['–ü–ü–¢-10-–ê']['1000*1000–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-10-–ê']['1000*1000–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-A\n\n'
        for p in data['–ü–ü–¢-15-–ê']['1000*1000–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-15-–ê']['1000*1000–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 15-–ë\n\n'
        for p in data['–ü–ü–¢-20-–ê']['1000*1000–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-20-–ê']['1000*1000–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 25-–ê\n\n'
        for p in data['–ü–ü–¢-25-–ê']['1000*1000–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-25-–ê']['1000*1000–º–º'][p]} —Ä—É–±.</b>\n"
        answer += f'\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: 35-A\n\n'
        for p in data['–ü–ü–¢-35-–ê']['1000*1000–º–º']:
            answer += f"üî∏ {p}: <b>{'%.2f' % data['–ü–ü–¢-35-–ê']['1000*1000–º–º'][p]} —Ä—É–±.</b>\n"

        conn.close()
        return answer

    def get_profile(self) -> str:
        """ –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω–∞ """

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            "WHERE category = 7 AND in_stock = 1 "
            "ORDER BY name"
        )
        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ 1—à—Ç (3–º): üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer

    def get_fiberglass_mesh(self) -> str:
        """ –°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è """

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            "WHERE category = 5 AND in_stock = 1 "
            "ORDER BY price"
        )
        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1–º2: üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer

    def get_steel(self, description: str = None) -> str or None:
        """ –°—Ç–∞–ª—å """

        types = [
            '–ê—Ä–º–∞—Ç—É—Ä–∞',
            '–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ',
            '–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π'
        ]
        if not description or description not in types:
            return

        conn = sqlite3.connect(self.db_name)
        row = conn.execute(
            "SELECT name, price "
            "FROM goods "
            f"WHERE description = '{description}' AND in_stock = 1 "
        )
        data = row.fetchall()
        if data:
            answer = 'üíµ –¶–µ–Ω–∞ –∑–∞ 1 –ø—Ä—É—Ç: üíµ\n\n'
            for dry in data:
                answer += f'üî∏ {dry[0]}: <b>{"%.2f" % dry[1]} —Ä—É–±.</b>\n'
        else:
            answer = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏...'
        conn.close()
        return answer



# conn = sqlite3.connect('../sogreym_db')
# cursor = conn.cursor()
#
# res = cursor.execute('SELECT * FROM category;')
# print(res.fetchall())
