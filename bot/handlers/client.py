# TODO –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–æ–ø–ª–∞—Å—Ç–∞

import math

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text

from .utils.db_manager import DBHandler

db = DBHandler()

CATEGORIES = [
    '–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω',
    '–î—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏',
    '–ö—Ä–∞—Å–∫–∏',
    '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞',
    '‚ú® –ü–µ–Ω–æ–ø–ª–∞—Å—Ç',
    '–ü—Ä–æ—Ñ–∏–ª—å',
    '–°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è',
    '–°—Ç–∞–ª—å',
    '–°—É—Ö–∏–µ —Å–º–µ—Å–∏',
    'OSB-–ø–ª–∏—Ç—ã –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ',
    'üìÑ –ö–æ–Ω—Ç–∞–∫—Ç—ã',
    '‚úÖ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ–Ω–æ–ø–ª–∞—Å—Ç'
]

main_menu = '‚ùó –í–°–ï –¶–ï–ù–´ –ù–ê –¢–û–í–ê–† –£–ö–ê–ó–ê–ù–´ <b>–ë–ï–ó –£–ß–ï–¢–ê –°–ö–ò–î–û–ö</b> ‚ùó\n\n' \
            '–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º ‚òé\n' \
            'üîπ +375336224802 <b>(–ú–¢–°)</b>\n' \
            'üîπ +375447717753 <b>(–ê1)</b>\n' \
            'üîπ 32-12-12 <b>(–ì–æ—Ä–æ–¥—Å–∫–æ–π)</b>\n\n' \
            '<a href="https://www.instagram.com/sogrey_m.grodno/"><b>üåÑ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞–º–∏ –≤ Instagram</b></a>\n\n' \
            '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, \n' \
            '—Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å üëá</b>\n'


async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        row_width=1
    )
    buttons = [cat for cat in CATEGORIES]
    keyboard.add(*buttons)
    await message.answer(
        text=main_menu,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


async def get_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        row_width=1
    )
    buttons = [cat for cat in CATEGORIES]
    keyboard.add(*buttons)
    await message.answer(
        text=main_menu,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


async def get_contacts(message: types.Message):
    answer = '<b>‚úî –ß–ü–¢–£–ü "–°–æ–≥—Ä–µ–π-–ú"\n</b>' \
             '–≥.–ì—Ä–æ–¥–Ω–æ, —É–ª.–°–æ–∫–æ–ª–æ–≤—Å–∫–æ–≥–æ, 20–ì\n\n' \
             '<b>üïí –í–†–ï–ú–Ø –†–ê–ë–û–¢–´:</b>\n\n' \
             'üí∏ <b>–ú–∞–≥–∞–∑–∏–Ω</b>\n' \
             '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞: <b>08:30 - 19:00</b>\n' \
             '—Å—É–±–±–æ—Ç–∞: <b>9:00 - 18:00</b>\n' \
             '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: <b>9:00 - 17:00</b>\n' \
             '‚ùé <b>–ë–ï–ó –û–ë–ï–î–ê –ò –í–´–•–û–î–ù–´–•</b>\n' \
             'üìû +375336224802 <b>–ú–¢–°</b>\n' \
             'üìû +375447717753 <b>–ê1</b>\n' \
             'üìû 32-12-12 <b>(–ì–æ—Ä–æ–¥—Å–∫–æ–π)</b>\n\n' \
             'üß∞ <b>–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂</b>\n' \
             '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞: <b>08:00 - 17:00</b>\n' \
             '—Å—É–±–±–æ—Ç–∞-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: <b>–≤—ã—Ö–æ–¥–Ω–æ–π</b>\n' \
             'üìû +375297804352 <b>(–ú–¢–°)</b>\n' \
             'üìû +375291990505 <b>(A1)</b>\n' \
             'üìû 32-06-06 <b>(–ì–æ—Ä–æ–¥—Å–∫–æ–π)</b>\n\n' \
             '<a href="https://www.instagram.com/sogrey_m.grodno/"><b>üåÑ –ú—ã –≤ Instagram</b></a>\n\n' \
             '<a href="https://goo.gl/maps/JfKL7NW7Bsdo4zVZ8">üåé <b>–ú–´ –ù–ê –ö–ê–†–¢–ï</b> üëà</a>'
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_drywall(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        'üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π',
        'üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π',
        '‚ú® –û–±—ã—á–Ω—ã–π',
        '‚ú≥ –ú–µ–Ω—é',
    ]
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*buttons)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_refactory_drywall(message: types.Message):
    answer = db.get_drywall('–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_moisture_resistant_drywal(message: types.Message):
    answer = db.get_drywall('–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_simple_drywall(message: types.Message):
    answer = db.get_drywall('–û–±—ã—á–Ω—ã–π')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_dowel(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        row_width=2
    )
    buttons = [
        '‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å',
        'üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å',
        '‚ú≥ –ú–µ–Ω—é',
    ]
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*buttons)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_steel_dowel(message: types.Message):
    answer = db.get_dowel('–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_plastic_dowel(message: types.Message):
    answer = db.get_dowel('–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        'üîª –¢–∞–π—Ñ—É–Ω –ú–∞—Å—Ç–µ—Ä',
        'üî∏ Condor',
        'üîπ Kapral',
        'üî∫ Malevanka',
        '‚ñ´ Sniezka',
        '‚ú≥ –ú–µ–Ω—é',
    ]
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*buttons)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_paints_taifun(message: types.Message):
    answer = db.get_paints(description='–¢–∞–π—Ñ—É–Ω –ú–∞—Å—Ç–µ—Ä')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_condor(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    buttons = [
        '–ë–µ–ª—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã',
        '–î–ª—è –ø–æ—Ç–æ–ª–∫–æ–≤',
        '–ö—É—Ö–Ω–∏ –∏ –≤–∞–Ω–Ω—ã–µ',
        '–õ–∞—Ç–µ–∫—Å–Ω–∞—è',
        '–§–∞—Å–∞–¥—ã',
        '–®–∫–æ–ª—ã –∏ –æ—Ñ–∏—Å—ã',
        '‚¨Ö –ö—Ä–∞—Å–∫–∏',
        '‚ú≥ –ú–µ–Ω—é'
    ]
    keyboard.add(*buttons)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_paints_condor_white_interiors(message: types.Message):
    answer = db.get_paints(
        description='Condor',
        description2='–ë–µ–ª—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_condor_ceiling(message: types.Message):
    answer = db.get_paints(
        description='Condor',
        description2='–î–ª—è –ø–æ—Ç–æ–ª–∫–æ–≤'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_condor_kitchen(message: types.Message):
    answer = db.get_paints(
        description='Condor',
        description2='–ö—É—Ö–Ω–∏ –∏ –≤–∞–Ω–Ω—ã–µ'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_condor_latex(message: types.Message):
    answer = db.get_paints(
        description='Condor',
        description2='–õ–∞—Ç–µ–∫—Å–Ω–∞—è'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_condor_front(message: types.Message):
    answer = db.get_paints(
        description='Condor',
        description2='–§–∞—Å–∞–¥—ã'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_condor_schools(message: types.Message):
    answer = db.get_paints(
        description='Condor',
        description2='–®–∫–æ–ª—ã –∏ –æ—Ñ–∏—Å—ã'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_kapral(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    buttons = [
        '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è',
        '–ú–æ—é—â–∞—è—Å—è',
        '–°—É–ø–µ—Ä–±–µ–ª–∞—è',
        '–§–∞—Å–∞–¥–Ω–∞—è',
        '‚¨Ö –ö—Ä–∞—Å–∫–∏',
        '‚ú≥ –ú–µ–Ω—é',
    ]
    keyboard.add(*buttons)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_paints_kapral_interior(message: types.Message):
    answer = db.get_paints(
        description='Kapral',
        description2='–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_kapral_washable(message: types.Message):
    answer = db.get_paints(
        description='Kapral',
        description2='–ú–æ—é—â–∞—è—Å—è'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_kapral_superwhite(message: types.Message):
    answer = db.get_paints(
        description='Kapral',
        description2='–°—É–ø–µ—Ä–±–µ–ª–∞—è'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_kapral_front(message: types.Message):
    answer = db.get_paints(
        description='Kapral',
        description2='–§–∞—Å–∞–¥–Ω–∞—è'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_malevanka(message: types.Message):
    answer = db.get_paints(description='Malevanka')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_paints_sniezka(message: types.Message):
    answer = db.get_paints(description='Sniezka')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_mineral_wool(message: types.Message):
    answer = db.get_mineral_wool()
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_ppt_price(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    answer = 'üëá –ö–∞–∫—É—é —Ü–µ–Ω—É —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?'
    keyboard.add(
        'üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3',
        'üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç',
        '‚ú≥ –ú–µ–Ω—é',
        '‚úÖ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ–Ω–æ–ø–ª–∞—Å—Ç',
    )
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_ppt_price_per_cubic_meter(message: types.Message):
    answer = db.get_ppt_cubic_meter()
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_ppt_price_for_one(message: types.Message):
    answer = db.get_ppt_one_sheet()
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_profile(message: types.Message):
    answer = db.get_profile()
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_fiberglass_mesh(message: types.Message):
    answer = db.get_fiberglass_mesh()
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_steel(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btns = [
        'üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞',
        'üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ',
        'üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π',
        '‚ú≥ –ú–µ–Ω—é'
    ]
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*btns)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_fittings(message: types.Message):
    answer = db.get_steel(description='–ê—Ä–º–∞—Ç—É—Ä–∞')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_pipe(message: types.Message):
    answer = db.get_steel(description='–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_corner(message: types.Message):
    answer = db.get_steel(description='–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_dry_mixes(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        'üíß –ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è',
        'üü• –ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π',
        'üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã',
        'üß± –ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã',
        'üü® –ö–æ—Ä–æ–µ–¥',
        'üü© –ö–æ—Ä–Ω–∏–∫',
        'üü´ –°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã',
        'üî¥ –°—Ç—è–∂–∫–∏',
        '‚ö™ –¶–µ–º–µ–Ω—Ç',
        'üü° –®–ø–∞—Ç–ª–µ–≤–∫–∞',
        'üü¢ –®—Ç—É–∫–∞—Ç—É—Ä–∫–∞',
        'üü£ –®—É–±–∞',
        '‚ú≥ –ú–µ–Ω—é',
    ]
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*buttons)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_waterproofing(message: types.Message):
    answer = db.get_dry_mixes(description='–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_gypsum(message: types.Message):
    answer = db.get_dry_mixes(description='–ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_glues(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        row_width=2
    )
    buttons = [
        '–ì–∏–ø—Å–æ–≤—ã–µ',
        '–î–ª—è –±–ª–æ–∫–æ–≤',
        '–î–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏',
        '–û–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ',
        '‚¨Ö –°—É—Ö–∏–µ —Å–º–µ—Å–∏',
        '‚ú≥ –ú–µ–Ω—é',
    ]
    answer = 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø'
    keyboard.add(*buttons)
    await message.answer(
        text=answer,
        reply_markup=keyboard
    )


async def get_gypsum_glue(message: types.Message):
    answer = db.get_dry_mixes(
        description='–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã',
        description2='–ì–∏–ø—Å–æ–≤—ã–µ'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_glue_for_blocks(message: types.Message):
    answer = db.get_dry_mixes(
        description='–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã',
        description2='–î–ª—è –±–ª–æ–∫–æ–≤'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_glue_for_thermal_insulation_systems(message: types.Message):
    answer = db.get_dry_mixes(
        description='–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã',
        description2='–î–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_facing(message: types.Message):
    answer = db.get_dry_mixes(
        description='–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã',
        description2='–û–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ'
    )
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_masonry_composition(message: types.Message):
    answer = db.get_dry_mixes(description='–ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_koroed(message: types.Message):
    answer = db.get_dry_mixes(description='–ö–æ—Ä–æ–µ–¥')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_kornik(message: types.Message):
    answer = db.get_dry_mixes(description='–ö–æ—Ä–Ω–∏–∫')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_self_leveling(message: types.Message):
    answer = db.get_dry_mixes(description='–°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_creed_mix(message: types.Message):
    answer = db.get_dry_mixes(description='–°—Ç—è–∂–∫–∏')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_cement(message: types.Message):
    answer = db.get_dry_mixes(description='–¶–µ–º–µ–Ω—Ç')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_putty(message: types.Message):
    answer = db.get_dry_mixes(description='–®–ø–∞—Ç–ª–µ–≤–∫–∞')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_plaster(message: types.Message):
    answer = db.get_dry_mixes(description='–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_shuba(message: types.Message):
    answer = db.get_dry_mixes(description='–®—É–±–∞')
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


async def get_osb(message: types.Message):
    answer = db.get_osb()
    await message.answer(
        text=answer,
        parse_mode='HTML'
    )


ppt_thickness = (1, 2, 3, 4, 5, 7, 8, 10)
ppt_density = (10, 15, 20, 25, 35)
sheet_type = ('–ê', '–ë')
ppt_calculator_text = f'‚ùó –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω–æ–ø–ª–∞—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ <b>–ß–ï–†–ï–ó –ó–ê–ü–Ø–¢–£–Æ</b>:\n\n' \
                      f'<b><code>–ø–ª–æ—â–∞–¥—å \–º2\, </code></b>' \
                      f'<b><code>—Ç–æ–ª—â–∏–Ω–∞ –ª–∏—Å—Ç–∞ \—Å–º\\ {ppt_thickness}, </code></b>' \
                      f'<b><code>–ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–µ–Ω–æ–ø–ª–∞—Å—Ç–∞ {ppt_density}, </code></b>' \
                      f'<b><code>–ª–∏—Å—Ç—ã –±–µ–∑ –ø–∞–∑–∞ –∏–ª–∏ —Å –ø–∞–∑–æ–º (–ê, –ë)</code></b>\n\n' \
                      f'<b>–ü–†–ò–ú–ï–†:</b>\n' \
                      f'<code>15.5, 5, 20, –ê</code>\n\n' \
                      f'üëÜ <i>–¢–µ–∫—Å—Ç –≤—ã—à–µ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —à–∞–±–ª–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ üëå</i>\n\n' \
                      f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ üëá'


async def get_ppt_calculator(message: types.Message):
    await message.answer(
        text=ppt_calculator_text,
        parse_mode='HTML'
    )


async def ppt_calculator(msg: types.Message):
    try:
        data = msg.text.split(',')
        if len(data) != 4 \
                or int(data[1]) not in ppt_thickness \
                or int(data[2]) not in ppt_density \
                or data[3].strip().upper() not in sheet_type:
            raise ValueError
        if int(data[1]) == 1 and (int(data[2]) in (10, 15) or data[3].strip().upper() == '–ë'):
            await msg.answer(
                text='üôÅ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–µ–Ω–æ–ø–ª–∞—Å—Ç —Ç–æ–ª—â–∏–Ω–æ–π 1 —Å–º\n'
                     '–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ <b>20</b> –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏\n'
                     '–∏ —Ç–æ–ª—å–∫–æ <b>–ª–∏—Å—Ç—ã –±–µ–∑ –ø–∞–∑–∞</b>...',
                parse_mode='HTML'
            )
        square = float(data[0])
        thickness = int(data[1])
        density = int(data[2])
    except (TypeError, ValueError):
        answer = '‚ùó –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô –í–í–û–î ‚ùó\n' + ppt_calculator_text
        await msg.answer(text=answer, parse_mode='HTML')
    else:
        s_type = data[3].strip().upper()
        # –±–æ–ª—å—à–∏–µ –ª–∏—Å—Ç—ã
        num_of_large_sheets = math.ceil(square)
        # –º–∞–ª–µ–Ω—å–∫–∏–µ –ª–∏—Å—Ç—ã
        num_of_small_sheets = math.ceil(square * 2)
        # –æ–±—ä–µ–º
        capacity = num_of_small_sheets * 0.5 * (thickness / 100)
        price_per_cubic_metr = db.get_ppt_cubic_meter_for_calculator()
        price = round(price_per_cubic_metr[f'–ü–ü–¢-{density}-{s_type}'] * capacity, 2)
        await msg.answer(
            text=f'<i>–ü–ª–æ—â–∞–¥—å:</i> <b>{square}–º2</b>\n'
                 f'<i>–¢–æ–ª—â–∏–Ω–∞ –ª–∏—Å—Ç–∞:</i> <b>{thickness}—Å–º</b>\n'
                 f'<i>–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:</i> <b>{density}</b>\n'
                 f'<i>–¢–∏–ø –ª–∏—Å—Ç–æ–≤:</i> <b>{"–ë–µ–∑ –ø–∞–∑–∞" if s_type == "–ê" else "–° –ø–∞–∑–æ–º"}</b>\n\n'
                 f'üìú <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤:</i>\n'
                 f'<b>{num_of_large_sheets}—à—Ç</b> 1000*1000–º–º\n'
                 f'<i>–∏–ª–∏</i>\n'
                 f'<b>{num_of_small_sheets}—à—Ç</b> 1000*500–º–º\n\n'
                 f'üì¶ <i>–û–±—ä–µ–º:</i> <b>{"%.3f" % capacity}–º3</b>\n\n'
                 f'üíµ <i>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</i>\n'
                 f'<b>{"%.2f" % price} —Ä—É–±.</b>\n'
                 f'<i>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã (3%):</i>\n'
                 f'<b>{"%.2f" % (price - (price * 0.03))} —Ä—É–±.</b>\n\n'
                 f'‚ùó –ù–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞\n'
                 f'—É—Ç–æ—á–Ω—è–π—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º:\n'
                 f'üìû +375297804352 <b>(–ú–¢–°)</b>\n'
                 f'üìû +375291990505 <b>(A1)</b>\n'
                 f'üìû 32-06-06 <b>(–ì–æ—Ä–æ–¥—Å–∫–æ–π)</b>',
            parse_mode='HTML'
        )


def register_client_handlers(dp: Dispatcher):
    dp.register_message_handler(
        start,
        commands=['start', '—Å—Ç–∞—Ä—Ç', 'menu', 'Menu']
    )
    dp.register_message_handler(
        get_menu,
        Text(equals=['‚ú≥ –ú–µ–Ω—é', '–ú–µ–Ω—é', '–º–µ–Ω—é'])
    )
    dp.register_message_handler(
        get_contacts,
        Text(equals=['üìÑ –ö–æ–Ω—Ç–∞–∫—Ç—ã', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–∫–æ–Ω—Ç–∞–∫—Ç—ã'])
    )
    dp.register_message_handler(
        get_drywall,
        Text(equals=['–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω', '–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω'])
    )
    dp.register_message_handler(
        get_refactory_drywall,
        Text(equals=['üî• –û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', '–û–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π', '–æ–≥–Ω–µ—É–ø–æ—Ä–Ω—ã–π'])
    )
    dp.register_message_handler(
        get_moisture_resistant_drywal,
        Text(equals=['üíß –í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π', '–≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–π'])
    )
    dp.register_message_handler(
        get_simple_drywall,
        Text(equals=['‚ú® –û–±—ã—á–Ω—ã–π', '–û–±—ã—á–Ω—ã–π', '–æ–±—ã—á–Ω—ã–π'])
    )
    dp.register_message_handler(
        get_dowel,
        Text(equals=['–î—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏', '–¥—é–±–µ–ª—è –¥–ª—è —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏'])
    )
    dp.register_message_handler(
        get_steel_dowel,
        Text(equals=['‚öí –°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', '–°—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å', '—Å—Ç–∞–ª—å–Ω–æ–π –≥–≤–æ–∑–¥—å'])
    )
    dp.register_message_handler(
        get_plastic_dowel,
        Text(equals=['üî® –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å', '–ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –≥–≤–æ–∑–¥—å'])
    )
    dp.register_message_handler(
        get_paints,
        Text(equals=['‚¨Ö –ö—Ä–∞—Å–∫–∏', '–ö—Ä–∞—Å–∫–∏', '–∫—Ä–∞—Å–∫–∏'])
    )
    dp.register_message_handler(
        get_paints_taifun,
        Text(equals=['üîª –¢–∞–π—Ñ—É–Ω –ú–∞—Å—Ç–µ—Ä', '–¢–∞–π—Ñ—É–Ω –ú–∞—Å—Ç–µ—Ä', '–¢–∞–π—Ñ—É–Ω –º–∞—Å—Ç–µ—Ä', '—Ç–∞–π—Ñ—É–Ω –ú–∞—Å—Ç–µ—Ä', '—Ç–∞–π—Ñ—É–Ω –º–∞—Å—Ç–µ—Ä'])
    )
    dp.register_message_handler(
        get_paints_condor,
        Text(equals=['üî∏ Condor', 'Condor', '—Åondor', '–ö–æ–Ω–¥–æ—Ä', '–∫–æ–Ω–¥–æ—Ä'])
    )
    dp.register_message_handler(
        get_paints_condor_white_interiors,
        Text(equals=['–ë–µ–ª—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã', '–±–µ–ª—ã–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã'])
    )
    dp.register_message_handler(
        get_paints_condor_ceiling,
        Text(equals=['–î–ª—è –ø–æ—Ç–æ–ª–∫–æ–≤', '–¥–ª—è –ø–æ—Ç–æ–ª–∫–æ–≤'])
    )
    dp.register_message_handler(
        get_paints_condor_kitchen,
        Text(equals=['–ö—É—Ö–Ω–∏ –∏ –≤–∞–Ω–Ω—ã–µ', '–∫—É—Ö–Ω–∏ –∏ –≤–∞–Ω–Ω—ã–µ'])
    )
    dp.register_message_handler(
        get_paints_condor_latex,
        Text(equals=['–õ–∞—Ç–µ–∫—Å–Ω–∞—è', '–ª–∞—Ç–µ–∫—Å–Ω–∞—è'])
    )
    dp.register_message_handler(
        get_paints_condor_front,
        Text(equals=['–§–∞—Å–∞–¥—ã', '—Ñ–∞—Å–∞–¥—ã'])
    )
    dp.register_message_handler(
        get_paints_condor_schools,
        Text(equals=['–®–∫–æ–ª—ã –∏ –æ—Ñ–∏—Å—ã', '—à–∫–æ–ª—ã –∏ –æ—Ñ–∏—Å—ã'])
    )
    dp.register_message_handler(
        get_paints_kapral,
        Text(equals=['üîπ Kapral', 'Kapral', 'kapral', '–ö–∞–ø—Ä–∞–ª', '–∫–∞–ø—Ä–∞–ª'])
    )
    dp.register_message_handler(
        get_paints_kapral_interior,
        Text(equals=['–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è', '–∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è'])
    )
    dp.register_message_handler(
        get_paints_kapral_washable,
        Text(equals=['–ú–æ—é—â–∞—è—Å—è', '–º–æ—é—â–∞—è—Å—è'])
    )
    dp.register_message_handler(
        get_paints_kapral_superwhite,
        Text(equals=['–°—É–ø–µ—Ä–±–µ–ª–∞—è', '—Å—É–ø–µ—Ä–±–µ–ª–∞—è'])
    )
    dp.register_message_handler(
        get_paints_kapral_front,
        Text(equals=['–§–∞—Å–∞–¥–Ω–∞—è', '—Ñ–∞—Å–∞–¥–Ω–∞—è'])
    )
    dp.register_message_handler(
        get_paints_malevanka,
        Text(equals=['üî∫ Malevanka', 'Malevanka', 'malevanka', '–ú–∞–ª–µ–≤–∞–Ω–∫–∞', '–º–∞–ª–µ–≤–∞–Ω–∫–∞'])
    )
    dp.register_message_handler(
        get_paints_sniezka,
        Text(equals=['‚ñ´ Sniezka', 'Sniezka', 'sniezka', '–°–Ω–µ–∂–∫–∞', '—Å–Ω–µ–∂–∫–∞'])
    )
    dp.register_message_handler(
        get_mineral_wool,
        Text(equals=['–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞', '–º–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–∞—Ç–∞'])
    )
    dp.register_message_handler(
        get_ppt_price,
        Text(equals=['‚ú® –ü–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–ø–µ–Ω–æ–ø–ª–∞—Å—Ç'])
    )
    dp.register_message_handler(
        get_ppt_price_per_cubic_meter,
        Text(equals=['üì¶ –¶–µ–Ω–∞ –∑–∞ 1–º3', '–¶–µ–Ω–∞ –∑–∞ 1–º3', '—Ü–µ–Ω–∞ –∑–∞ 1–º3'])
    )
    dp.register_message_handler(
        get_ppt_price_for_one,
        Text(equals=['üìÉ –¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '–¶–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç', '—Ü–µ–Ω–∞ –∑–∞ 1 –ª–∏—Å—Ç'])
    )
    dp.register_message_handler(
        get_profile,
        Text(equals=['–ü—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å'])
    )
    dp.register_message_handler(
        get_fiberglass_mesh,
        Text(equals=['–°–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è', '—Å–µ—Ç–∫–∞ —à—Ç—É–∫–∞—Ç—É—Ä–Ω–∞—è'])
    )
    dp.register_message_handler(
        get_steel,
        Text(equals=['–°—Ç–∞–ª—å', '—Å—Ç–∞–ª—å'])
    )
    dp.register_message_handler(
        get_fittings,
        Text(equals=['üî∫ –ê—Ä–º–∞—Ç—É—Ä–∞', '–ê—Ä–º–∞—Ç—É—Ä–∞', '–∞—Ä–º–∞—Ç—É—Ä–∞'])
    )
    dp.register_message_handler(
        get_pipe,
        Text(equals=['üîπ –¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', '–¢—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ', '—Ç—Ä—É–±—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ'])
    )
    dp.register_message_handler(
        get_corner,
        Text(equals=['üîª –£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '–£–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π', '—É–≥–æ–ª–æ–∫ —Å—Ç–∞–ª—å–Ω–æ–π'])
    )
    dp.register_message_handler(
        get_dry_mixes,
        Text(equals=['‚¨Ö –°—É—Ö–∏–µ —Å–º–µ—Å–∏', '–°—É—Ö–∏–µ —Å–º–µ—Å–∏', '—Å—É—Ö–∏–µ —Å–º–µ—Å–∏'])
    )
    dp.register_message_handler(
        get_waterproofing,
        Text(equals=['üíß –ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è', '–ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è', '–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è'])
    )
    dp.register_message_handler(
        get_gypsum,
        Text(equals=['üü• –ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', '–ì–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π', '–≥–∏–ø—Å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π'])
    )
    dp.register_message_handler(
        get_glues,
        Text(equals=['üüß –ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–ö–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–∫–ª–µ–µ–≤—ã–µ —Å–æ—Å—Ç–∞–≤—ã'])
    )
    dp.register_message_handler(
        get_gypsum_glue,
        Text(equals=['–ì–∏–ø—Å–æ–≤—ã–µ', '–≥–∏–ø—Å–æ–≤—ã–µ'])
    )
    dp.register_message_handler(
        get_glue_for_blocks,
        Text(equals=['–î–ª—è –±–ª–æ–∫–æ–≤', '–¥–ª—è –±–ª–æ–∫–æ–≤'])
    )
    dp.register_message_handler(
        get_glue_for_thermal_insulation_systems,
        Text(equals=['–î–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏', '–¥–ª—è —Å–∏—Å—Ç–µ–º —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏–∏'])
    )
    dp.register_message_handler(
        get_facing,
        Text(equals=['–û–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ', '–æ–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–µ'])
    )
    dp.register_message_handler(
        get_masonry_composition,
        Text(equals=['üß± –ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–ö–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã', '–∫–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ—Å—Ç–∞–≤—ã'])
    )
    dp.register_message_handler(
        get_koroed,
        Text(equals=['üü® –ö–æ—Ä–æ–µ–¥', '–ö–æ—Ä–æ–µ–¥', '–∫–æ—Ä–æ–µ–¥'])
    )
    dp.register_message_handler(
        get_kornik,
        Text(equals=['üü© –ö–æ—Ä–Ω–∏–∫', '–ö–æ—Ä–Ω–∏–∫', '–∫–æ—Ä–Ω–∏–∫'])
    )
    dp.register_message_handler(
        get_self_leveling,
        Text(equals=['üü´ –°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã', '–°–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã', '—Å–∞–º–æ–Ω–∏–≤–µ–ª–∏—Ä—ã'])
    )
    dp.register_message_handler(
        get_creed_mix,
        Text(equals=['üî¥ –°—Ç—è–∂–∫–∏', '–°—Ç—è–∂–∫–∏', '—Å—Ç—è–∂–∫–∏'])
    )
    dp.register_message_handler(
        get_cement,
        Text(equals=['‚ö™ –¶–µ–º–µ–Ω—Ç', '–¶–µ–º–µ–Ω—Ç', '—Ü–µ–º–µ–Ω—Ç'])
    )
    dp.register_message_handler(
        get_putty,
        Text(equals=['üü° –®–ø–∞—Ç–ª–µ–≤–∫–∞', '–®–ø–∞—Ç–ª–µ–≤–∫–∞', '—à–ø–∞—Ç–ª–µ–≤–∫–∞'])
    )
    dp.register_message_handler(
        get_plaster,
        Text(equals=['üü¢ –®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞', '—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞'])
    )
    dp.register_message_handler(
        get_shuba,
        Text(equals=['üü£ –®—É–±–∞', '–®—É–±–∞', '—à—É–±–∞'])
    )
    dp.register_message_handler(
        get_osb,
        Text(equals=['OSB-–ø–ª–∏—Ç—ã –≤–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ'])
    )
    dp.register_message_handler(
        get_ppt_calculator,
        Text(equals=['‚úÖ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ–Ω–æ–ø–ª–∞—Å—Ç', '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ–Ω–æ–ø–ª–∞—Å—Ç'])
    )
    dp.register_message_handler(ppt_calculator)
